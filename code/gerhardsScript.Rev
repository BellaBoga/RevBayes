# This is a template, not a stand-alone script
# The variable "char" has to be set to a value between 1-28 before it can be run.


seed(12345)
counter1 = 0

families = readDataDelimitedFile("../families.tsv")[1]	 

for (fam in families) {
    treePosterior[++counter1] = readTrees("../trees/"+fam+".posterior.tree")
}



mni = 0
mvi = 0

for (i in 1:counter1) {
    trees[i] ~ dnEmpiricalTree(treeTrace(treePosterior[i],0))
    moves[++mvi] = mvEmpiricalTree(trees[i],metropolisHastings=FALSE)
    }

counter1 = 0
for (fam in families) {
    ddata[++counter1] = readDiscreteCharacterData("../data/"+fam+".data.nex")
}


dependent ~ dnReversibleJumpMixture(0,dnMixture(v(1),simplex(v(1))),.5)
moves[++mvi] = mvRJSwitch(dependent,weight=1)


alpha ~ dnGamma(1,1)
moves[++mvi] = mvSlide(alpha)
beta ~ dnGamma(4,2)
moves[++mvi] = mvSlide(beta)


for (i in 1:4) {
   erI[i] ~ dnGamma(alpha,beta)
   moves[++mvi] = mvScale(erI[i])
}


for (i in 1:8) {
   er[i] ~ dnGamma(alpha,beta)
   moves[++mvi] = mvScale(er[i])
}


for (i in 1:4) {
   for (j in 1:4) {
     q[i][j] := 0
   }
}


q[1][2] := ifelse(dependent==0,erI[1],er[1]) #ab
q[1][3] := ifelse(dependent==0,erI[2],er[2]) #ac
q[2][1] := ifelse(dependent==0,erI[3],er[3]) #ba
q[2][4] := ifelse(dependent==0,erI[2],er[4]) #bd
q[3][1] := ifelse(dependent==0,erI[4],er[5]) #ca
q[3][4] := ifelse(dependent==0,erI[1],er[6]) #cd
q[4][2] := ifelse(dependent==0,erI[4],er[7]) #db
q[4][3] := ifelse(dependent==0,erI[3],er[8]) #dc

Q := fnFreeK(q,rescale=FALSE)


for (fmI in 1:families.size()) {
   ddata[fmI].excludeAll()
   ddata[fmI].includeCharacter(char)
   phyloseq[fmI] ~ dnPhyloCTMC(tree=trees[fmI],Q=Q,type="Standard")
   phyloseq[fmI].clamp(ddata[fmI])
}

mymodel = model(Q)


monitors[++mni] = mnModel(filename="output/universal"+char+".log",printgen=10)

monitors[++mni] = mnScreen(printgen=10)
monitors[mni].addVariable(dependent)



mymcmc = mcmcmc(mymodel, monitors, moves, nruns=4, nchains=4)


mymcmc.burnin(generations=100,tuningInterval=10)

mymcmc.run(generations=10000)




pow_p = powerPosterior(mymodel, moves, monitors, "output/universal"+char+".out", cats=50)

pow_p.burnin(generations=1000,tuningInterval=1000)

pow_p.run(generations=1000)

ss = steppingStoneSampler(file="output/universal"+char+".out", powerColumnName="power",
                          likelihoodColumnName="likelihood")

ss.marginal()

write(ss.marginal(),filename="output/universal"+char+"_marginal.txt")


q()


